/*-----------------------------------------------------------------------------
----------------------------1--------$MIXINS-----------------------------------
-------------------------------------------------------------------------------*/


// --------------------------------------------------------------------------- //
// ----------------------- MEDIA QUERIES ------------------------------------- //
// --------------------------------------------------------------------------- //

@mixin mq($viewports, $constraint1: max, $constraint2: width) {

	// Set default variables
	$min: min-#{$constraint2};
	$max: max-#{$constraint2};

	@if(type-of($viewports) == number) {
		@media screen and (#{$constraint1}-#{$constraint2}: $viewports) {
			@content;
		}
	} @else {
		@media screen and ($min: nth($viewports, 1)) and ($max: nth($viewports, 2)) {
			@content;
		}
	}

}

// USAGE:
//
// ---- for max-width media query ----
//
//  @include mq(1080px) {
//      display:none;
//  }
//
// ---- for min-width media query ----
//
//  @include mq(1080px, min) {
//      display:none;
//  }
//
// ---- OR for min-max ----
//
// @include mq((700px, 780px)) {
//     display:block;
// }
//
// ---- for max-height media query ----
//
//  @include mq(1080px, max, height) {
//      display:none;
//  }
//
// ---- for min-height media query ----
//
//  @include mq(1080px, min, height) {
//      display:none;
//  }
//
// ---- for min-max height media query ----
//
//  @include mq((700px, 780px), null, height) {
//      display:none;
//  }

// --------------------------------------------------------------------------- //
// ------------------------------- FONTS ------------------------------------- //
// --------------------------------------------------------------------------- //


@mixin fonticon {
	font-family: $fonticon;
	speak: none;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	line-height: 1 ;
}


// px to rem for font-sizes and line-height
@mixin font-size($sizeValue: 1.6, $line: $sizeValue * 1.25){
	font-size: ($sizeValue * 1) + px;
	line-height: ($line * 1) + px;
	font-size: ($sizeValue / 10) + rem;
	line-height: ($line / 10) + rem;
}
// usage: @include font-size(13);




// --------------------------------------------------------------------------- //
// ------------------------------- BOX MODEL RELATED ------------------------- //
// --------------------------------------------------------------------------- //

// Positioning offsets
@mixin _position ($property: absolute, $top: auto, $right: auto, $bottom: auto, $left: auto, $zindex: 2) {
	position: $property;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	z-index: $zindex;
}

// usage:  @include _position(absolute,10px,0px,auto,auto,2);
/*
returns__________
position:absolute;
top:10px;
right:0px;
bottom:auto;
left:auto;
z-index:5
*/


// Inline-Block
@mixin inline-block($align: bottom) {
	display:-moz-inline-stack;
	display: inline-block;
	vertical-align: $align;
	zoom: 1;
	*display: inline;
	*vertical-align: auto;
}
//usage: @include inline-block(top | middle | bottom);



// Clearfix
@mixin clearfix {

	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear:both;
	}

	& {
		*zoom:1;
	}
}





// ------------------------------------------------------------------------------------- //
// ------------------------------- CROSS BROWSER OPACITY ------------------------------- //
// ------------------------------------------------------------------------------------- //

@mixin opacity($opacity, $ie-support:true) {

	@if $ie-support == true {

		filter: alpha(opacity=($opacity * 100));
		-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($opacity * 100) + ")";
		opacity: $opacity;

	} @else {

		opacity: $opacity;

	}
}

// usage:
// @include opacity( 1 );


// ------------------------------------------------------------------------------------- //
// ------------------------------- GLOBAL VENDOR PREFIX -------------------------------- //
// ------------------------------------------------------------------------------------- //


/*
	Usage: @include prefixer(border-radius, $radii, webkit ms spec);
*/

$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

@mixin prefixer ($property, $value, $prefixes) {
  @each $prefix in $prefixes {

    @if $prefix == webkit and $prefix-for-webkit == true {
      -webkit-#{$property}: $value;
    }
    @else if $prefix == moz and $prefix-for-mozilla == true {
      -moz-#{$property}: $value;
    }
    @else if $prefix == ms and $prefix-for-microsoft == true {
      -ms-#{$property}: $value;
    }
    @else if $prefix == o and $prefix-for-opera == true {
      -o-#{$property}: $value;
    }
    @else if $prefix == spec and $prefix-for-spec == true {
      #{$property}: $value;
    }
    @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin transition ($properties...) {
  @if length($properties) >= 1 {
    @include prefixer(transition, $properties, webkit moz ms o spec);
  }

  @else {
    $properties: all 0.15s ease-out 0;
    @include prefixer(transition, $properties, webkit moz ms o spec);
  }
}

@mixin box-sizing ($box) {
//  content-box | border-box | inherit
  @include prefixer(box-sizing, $box, webkit moz spec);
}


@mixin transform($property: none) {
//  none | <transform-function>
  @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}



// ------------------------------------------------------------------------------------ //
// ------------------------------- COLOUR RELATED MIXINS ------------------------------ //
// ------------------------------------------------------------------------------------ //
// RGBA Mixin with fallback
@mixin rgba($attribute, $color, $background) {
	$percent: alpha($color) * 100%;
	$opaque: opacify($color, 1);
	$solid-color: mix($opaque, $background, $percent);
	#{$attribute}: $solid-color;
	#{$attribute}: $color;
}
// usage:
// @include rgba('background-color', rgba(#000, 0.5), #000);




// -------------------------------------------------------------------------------------- //
// ------------------------------- FORM RELATED MIXINS ---------------------------------- //
// -------------------------------------------------------------------------------------- //

// Placeholder Input Styles
@mixin placeholder {
	&.placeholder { @content };
	&::-webkit-input-placeholder { @content };
	&::-moz-placeholder { @content };
	&:-ms-input-placeholder { @content };
}

// usage:
// input {
//    @include placeholder {
//      /some placeholder styles here/
//    }
// }



// remove pesky default styles in iOS.
@mixin remove-safari-defaults {
	-webkit-appearance: none;
	@include border-radius(0px);
}

// usage: @include remove-safari-defaults;



//************************************************************************//
// Generate a variable ($all-text-inputs) with a list of all html5
// input types that have a text-based input, excluding textarea.
// http://diveintohtml5.org/forms.html
//************************************************************************//
$inputs-list: 'input[type="email"]',
              'input[type="number"]',
              'input[type="password"]',
              'input[type="search"]',
              'input[type="tel"]',
              'input[type="text"]',
              'input[type="url"]',

              // Webkit & Gecko may change the display of these in the future
              'input[type="color"]',
              'input[type="date"]',
              'input[type="datetime"]',
              'input[type="datetime-local"]',
              'input[type="month"]',
              'input[type="time"]',
              'input[type="week"]';

$unquoted-inputs-list: ();
@each $input-type in $inputs-list {
  $unquoted-inputs-list: append($unquoted-inputs-list, unquote($input-type), comma);
}

$all-text-inputs: $unquoted-inputs-list;


// Hover Pseudo-class
//************************************************************************//
$all-text-inputs-hover: ();
@each $input-type in $unquoted-inputs-list {
      $input-type-hover: $input-type + ":hover";
      $all-text-inputs-hover: append($all-text-inputs-hover, $input-type-hover, comma);
}

// Focus Pseudo-class
//************************************************************************//
$all-text-inputs-focus: ();
@each $input-type in $unquoted-inputs-list {
      $input-type-focus: $input-type + ":focus";
      $all-text-inputs-focus: append($all-text-inputs-focus, $input-type-focus, comma);
}

// You must use interpolation on the variable:
// #{$all-text-inputs}
// #{$all-text-inputs-hover}
// #{$all-text-inputs-focus}

// Example
//************************************************************************//
//   #{$all-text-inputs}, textarea {
//     border: 1px solid red;
//   }




// -------------------------------------------------------------------------------------- //
// ------------------------------- ANIMATION RELATED MIXINS ----------------------------- //
// -------------------------------------------------------------------------------------- //



// accelerate all the hardware for smoothers css transtions and transforms
@mixin hardwareAccelerate {
  -webkit-transform: translate3d(0,0,0);
  -webkit-perspective: 1000;
  -webkit-backface-visibility: hidden;

  -moz-transform: translate3d(0,0,0);
  -moz-perspective: 1000;
  -moz-backface-visibility: hidden;

  -ms-transform: translate3d(0,0,0);
  -ms-perspective: 1000;
  -ms-backface-visibility: hidden;

  transform: translate3d(0,0,0);
  perspective: 1000;
  backface-visibility: hidden;
}


// ------------------------------------------------------------------------------ //
// --------------------------- Animation Easing Types --------------------------- //
// ------------------------------------------------------------------------------ //

$easeIn: cubic-bezier(0.825, 0.000, 1.000, 0.640);
$easeInOut: cubic-bezier(0.665, 0.000, 0.430, 1);
$easeOut: cubic-bezier(0.200, 0.470, 0.435, 0.970);
$linear: cubic-bezier(0.250, 0.250, 0.750, 0.750);

// usage:
// e.g. @include transition(.6s $easeInOut all);


// ------------------------------------------------------------------------------ //
// --------------------------- Animation Easing Types --------------------------- //
// ------------------------------------------------------------------------------ //

$easeIn: cubic-bezier(0.825, 0.000, 1.000, 0.640);
$easeInOut: cubic-bezier(0.665, 0.000, 0.430, 1);
$easeOut: cubic-bezier(0.200, 0.470, 0.435, 0.970);
$linear: cubic-bezier(0.250, 0.250, 0.750, 0.750);

// usage:
// e.g. @include transition(.6s $easeInOut all);

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str...) {
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-ms-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};      
}


// ------------------------------------------------------------------------------ //
// --------------------------- CSS3 Filters ------------------------------------- //
// ------------------------------------------------------------------------------ //

@mixin filter($filter-type,$filter-amount) { 
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

// usage:
// e.g. @include filter(grayscale, 100%);



// ------------------------------------------------------------------------------ //
// --------------------------- Auto-width Calculator ---------------------------- //
// ------------------------------------------------------------------------------ //

@mixin width($count, $margin, $total: 0, $end: false) {
	@if $total > 0 {
		width: ((100 / 12) * $count) - abs($margin) + (abs($margin) / $total);
	} @else {
		width: (1 / $count * 100%) - abs($margin) + (abs($margin) / $count);
	}
	@if $end == false {
		@if $margin < 0 {
			margin-right: 0;
			margin-left: abs($margin);
		} @else {
			margin-left: 0;
			margin-right: $margin;
		}
	} @else {
		margin-right: 0;
		margin-left: 0;
	}
	@if $total == 0 {
		&:nth-of-type(#{($count)+"n+0"}) {
			@if $margin < 0 {
				margin-left: 0;
			} @else {
				margin-right: 0;
			}
		}
	}
	&.last {
		@if $margin < 0 {
			margin-left: 0;
		} @else {
			margin-right: 0;
		}
	}
}