.showcase {

	&__nav {

		margin-bottom: 30px;

		@include mq($mq-mob--lrg, min) {

			border-bottom: 1px solid $l-grey;

		}

	}

	&__nav-item {

		display: block;
		width: 100%;
		margin: 5px 0;

		border-top: 1px dotted $l-grey;
		border-bottom: 1px dotted $l-grey;
		color: $d-grey;

		font-family: $primaryFont;
		text-align: center;

		transition:	border-color 0.15s ease-in-out,
		            color 0.15s ease-in-out;

		@include mq($mq-mob--lrg, min) {

			display: inline-block;
			width: auto;
			margin: auto;

			background: transparent;
			border: none;

		}

		&.is-active,
		&:hover {

			border-top: 1px solid $accent-1;
			border-bottom: 1px solid $accent-1;
			color: $accent-1;

			@include mq($mq-mob--lrg, min) {

				border: none;
				
			}

		}

	}

	&__content {

		@include font-size(0);
		text-align: center;

		@include mq($mq-mob--lrg, min) {

			column-count: 2;
			column-gap: 15px;
			
		}

		@include mq($mq-desk, min) {

			column-count: 3;

		}

	}

	&__project {

		/* Normally, setting this to inline-block would prevent empty gaps in the columns.
		 *
		 * Unfortunately, it looks like no two browser vendors could agree upon
		 * how the columns would in fact be laid out, therefore regardless of setting the element
		 * to block or inline-block, it will differ across browser. Sorry :(
		 */
		position: relative;
		// display: inline-block;

		opacity: 0;
		transform: translateY(20px);
		max-height: 0;

		/* max-height
		 * delay so it doesn't trigger a reflow
		 * when the 'is-visible' class is removed
		 */
		transition: opacity 0.5s ease-in-out,
		            transform 0.5s ease-in-out,
		            /* Adding a small delay here allows the next category's height
		             * to load before the current one is hidden, therefore preventing
		             * flickering when the images' sizes haven't yet been calculated
		             * and thus pushed the boundaries of the parent wrapper. */
		            max-height 0s linear 0.75s;

		/*
		 * Fix infinite paint flashing in Webkit-based browsers
		 * due to elements being taller than the screen
		 */
		-webkit-backface-visibility: hidden;

		/*
		 * Fix elements overflowing in various browsers
		 */
		-webkit-column-break-inside: avoid;
		          page-break-inside: avoid;
		               break-inside: avoid;

		@include mq($mq-mob--lrg, min) {

			transform: translateY(50px);

		}

		@include mq($mq-tab--lrg, min) {

			transform: translateY(100px);

		}

		@include mq($mq-desk, min) {

			cursor: url('/assets/img/magnifying-glass.cur') 10 10, zoom-in;

		}
			
		&.is-visible {

			opacity: 1;
			transform: translateY(0);
			max-height: 1250px;

			/* max-height
			 * no delay allows allows the layout to expand while invisible
			 * thus avoiding column reflows
			 */
			transition: opacity 0.5s ease-in-out 0.25s,
			            transform 0.5s ease-in-out 0.25s,
			            max-height 0s linear;

		}

		&-img {

			max-height: 0;
			overflow: hidden;
			margin-bottom: 15px;

			transition: max-height 0s linear 0.75s;

			.showcase__project.is-visible & {

				max-height: 1250px;
				transition: max-height 0s linear;

			}

		}

		&-overlay {

			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			width: 100%;
			height: 100.1%; // fix overlay not stretching the entire height due to subpixel rendering issues

			background: transparentize($white, 0.05);

			opacity: 0;
			visibility: hidden; // prevents initial action on touch devices
			overflow: hidden;

			transition: opacity cubic-bezier(0.4, 0.6, 0.6, 1) 0.35s,
			            visibility cubic-bezier(0.4, 0.6, 0.6, 1) 0.35s;

			.showcase__project:hover &,
			.showcase__project:focus & {

				opacity: 1;
				visibility: visible;

			}

			.showcase__project.is-visible & {

				overflow: visible;

			}

		}

		&-pop {

			position: absolute;
			z-index: -1;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			width: 100%;
			height: 100%;

			opacity: 0.1;

			svg {

				width: 200px;

			}

		}

		&-details {

			width: 100%;
			height: 100%;
			padding: 15px 105px 15px 15px;

			text-align: left;

			transform: translateY(15px);
			filter: hue-rotate(-270deg);

			transition: transform cubic-bezier(0.4, 0.6, 0.6, 1) 0.35s,
			            filter cubic-bezier(0.4, 0.6, 0.6, 1) 0.35s;

			.showcase__project:hover &,
			.showcase__project:focus & {

				transform: translateY(0);
				filter: hue-rotate(0deg);

			}

		}

		&-name {

			display: inline-block;
			// prevent accidental clicks between the name and the description
			margin-bottom: 0;

			color: $accent-1;

			font-family: $secondaryFont;
			text-transform: initial;

			cursor: initial;

			@include mq($mq-mob--lrg, min) {
				
				@include font-size(32, 32);

			}

			@include mq($mq-tab--lrg, min) {

				@include font-size(48, 48);

			}

		}

		&-description {

			display: inline-block;

			color: $accent-1;

			cursor: initial;

		}

		&-links {

			position: absolute;
			top: 15px;
			right: 15px;

		}

		&-link {

			display: block;
			width: 50px;
			height: 50px;
			padding: 10px;

			background-color: $accent-1;

			line-height: 0;

			&:not(:last-child) {

				margin-bottom: 10px;

			}

			&:hover {

				.arrow {

					transform: translate(5px, -5px);
					
				}

				.chain {

					&__top {
						/*
						 * Chrome and FF render the translated distances slightly differently,
						 * this keeps the values roughly similar across browsers.
						 * Unfortunately, SVG transforms don't work at all in IE,
						 * but what's new, right? ¯\_(ツ)_/¯
						 */
						transform: translate(3.8px, -3.8px);

					}

					&__bottom {

						transform: translate(-3.8px, 3.8px);

					}

				}

			}

			&--zoom {

				/* 
				 * Stop the modal from opening on window width/height smaller than 640px
				 * as there's no point in opening the modal for devices that are so small
				 */
				display: none;

				color: $white;

				font-family: $primaryFont;
				@include font-size(36, 30);

				transition: background-color 0.2s ease-in-out;

				@include mq($mq-mob--lrg, min) {

					display: block;

				}

				&:hover {

					background-color: $black;

				}

			}

			svg {

				overflow: visible;

				fill: $white;

				path {

					transition: transform 0.25s ease-in-out;

				}

			}

		}

	}

}